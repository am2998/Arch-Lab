while true; do
    echo -en "\nWould you like to modify any settings? (Enter the number to change, 'c' to confirm, 'a' to abort): "
    read choice
    
    case $choice in
        1)  # Desktop Environment
            echo -e "\n=== Desktop Environment Selection ==="
            echo "  1) Hyprland"
            echo "  2) XFCE4"
            echo "  3) KDE Plasma"
            echo "  4) GNOME"
            read -p "Enter your choice (1-4): " DE_CHOICE
            case $DE_CHOICE in
                1) DE_TYPE="Hyprland" ;;
                2) DE_TYPE="XFCE4" ;;
                3) DE_TYPE="KDE Plasma" ;;
                4) DE_TYPE="GNOME" ;;
                *) echo "⚠ Invalid choice. No changes made." ;;
            esac
            ;;
        2)  # Hostname
            echo -n "Enter hostname: "; read -r HOSTNAME
            ;;
        3)  # Keyboard Layout
            echo -e "\n=== Keyboard Layout Selection ==="
            # Get available keyboard layouts and filter to show only one entry per language
            mapfile -t ALL_KEYBOARD_LAYOUTS < <(localectl list-keymaps | sort)

            # Create a filtered array with only one variant per base language
            declare -a KEYBOARD_LAYOUTS
            declare -A seen_layouts

            for layout in "${ALL_KEYBOARD_LAYOUTS[@]}"; do
                # Extract the base language code (e.g., "us" from "us-euro")
                base_lang=$(echo "$layout" | cut -d'-' -f1)
                
                # If we haven't seen this base language yet, add it to our filtered list
                if [[ -z "${seen_layouts[$base_lang]}" ]]; then
                    seen_layouts[$base_lang]=1
                    KEYBOARD_LAYOUTS+=("$layout")
                fi
            done

            # Set the number of columns for display
            COLUMNS=4
            TOTAL_LAYOUTS=${#KEYBOARD_LAYOUTS[@]}

            echo -e "\nAvailable keyboard layouts (primary variants only):"
            # Display available layouts in multiple columns
            for ((i=0; i<TOTAL_LAYOUTS; i++)); do
                # Format each entry with fixed width for alignment
                printf "  %3d) %-20s" "$((i+1))" "${KEYBOARD_LAYOUTS[$i]}"
                # Add a newline after every COLUMNS items
                if (( (i+1) % COLUMNS == 0 )); then
                    echo ""
                fi
            done
            # Add a final newline if needed
            if (( TOTAL_LAYOUTS % COLUMNS != 0 )); then
                echo ""
            fi

            # Let user select a layout by number
            while true; do
                echo -n "\nEnter the number of your keyboard layout: "
                read -r layout_choice
                
                # Validate input
                if [[ "$layout_choice" =~ ^[0-9]+$ && "$layout_choice" -ge 1 && "$layout_choice" -le "${#KEYBOARD_LAYOUTS[@]}" ]]; then
                    KEYBOARD_LAYOUT="${KEYBOARD_LAYOUTS[$((layout_choice-1))]}"
                    echo "✓ Selected keyboard layout: $KEYBOARD_LAYOUT"
                    break
                else
                    echo "⚠ Invalid choice. Please enter a number between 1 and ${#KEYBOARD_LAYOUTS[@]}."
                fi
            done
            ;;
        4)  # Locale
            echo -e "\n=== Locale Selection ==="
            # Get available locales and store them in an array
            mapfile -t ALL_AVAILABLE_LOCALES < <(grep -E "^#[a-zA-Z]" /etc/locale.gen | sed 's/^#//' | sort)

            # Create a filtered array with only one variant per base language
            declare -a AVAILABLE_LOCALES
            declare -A seen_locales

            for locale in "${ALL_AVAILABLE_LOCALES[@]}"; do
                # Extract the base language code (e.g., "en_US" from "en_US.UTF-8")
                base_lang=$(echo "$locale" | cut -d'.' -f1 | cut -d'@' -f1)
                
                # If we haven't seen this base language yet, add it to our filtered list
                if [[ -z "${seen_locales[$base_lang]}" ]]; then
                    seen_locales[$base_lang]=1
                    AVAILABLE_LOCALES+=("$locale")
                fi
            done

            # Set the number of columns for display
            LOCALE_COLUMNS=4
            TOTAL_LOCALES=${#AVAILABLE_LOCALES[@]}

            echo -e "\nAvailable locales (primary variants only):"
            # Display available locales in multiple columns
            for ((i=0; i<TOTAL_LOCALES; i++)); do
                # Format each entry with fixed width for alignment
                printf "  %3d) %-20s" "$((i+1))" "${AVAILABLE_LOCALES[$i]}"
                # Add a newline after every LOCALE_COLUMNS items
                if (( (i+1) % LOCALE_COLUMNS == 0 )); then
                    echo ""
                fi
            done
            # Add a final newline if needed
            if (( TOTAL_LOCALES % LOCALE_COLUMNS != 0 )); then
                echo ""
            fi

            # Let user select a locale by number
            while true; do
                echo -n "\nEnter the number of your desired locale: "
                read -r locale_choice
                
                # Validate input
                if [[ "$locale_choice" =~ ^[0-9]+$ && "$locale_choice" -ge 1 && "$locale_choice" -le "${#AVAILABLE_LOCALES[@]}" ]]; then
                    SYSTEM_LOCALE="${AVAILABLE_LOCALES[$((locale_choice-1))]}"
                    echo "✓ Selected locale: $SYSTEM_LOCALE"
                    break
                else
                    echo "⚠ Invalid choice. Please enter a number between 1 and ${#AVAILABLE_LOCALES[@]}."
                fi
            done
            ;;
        5)  # Mirror Country
            echo -e "\n=== Mirror Country Selection ==="
            echo "Select your country for repository mirrors:"
            echo "  1) Italy"
            echo "  2) Germany"
            echo "  3) United States"
            echo "  4) United Kingdom"
            echo "  5) France"
            echo "  6) Spain"
            echo "  7) Netherlands"
            echo "  8) Other (specify)"
            echo "  9) Worldwide (no specific country)"
            read -p "Enter your choice (1-9): " mirror_choice
            case $mirror_choice in
                1) MIRROR_COUNTRY="Italy" ;;
                2) MIRROR_COUNTRY="Germany" ;;
                3) MIRROR_COUNTRY="United States" ;;
                4) MIRROR_COUNTRY="United Kingdom" ;;
                5) MIRROR_COUNTRY="France" ;;
                6) MIRROR_COUNTRY="Spain" ;;
                7) MIRROR_COUNTRY="Netherlands" ;;
                8) 
                   echo -n "Enter your country name (in English): "
                   read -r MIRROR_COUNTRY
                   ;;
                9) MIRROR_COUNTRY="" ;;
                *) echo "⚠ Invalid choice. No changes made." ;;
            esac
            ;;
        6)  # Username
            echo -n "Enter the username: "; read -r USER
            ;;
        7)  # Passwords
            echo -e "\n=== Password Configuration ==="
            get_password "Enter the password for user $USER" USERPASS
            get_password "Enter the password for user root" ROOTPASS
            ;;
        8)  # CPU Type
            echo -e "\n=== CPU Selection ==="
            echo "  1) Intel"
            echo "  2) AMD"
            read -p "Enter your choice (1-2): " cpu_choice
            case $cpu_choice in
                1) CPU_MICROCODE="intel-ucode"; CPU_TYPE="Intel" ;;
                2) CPU_MICROCODE="amd-ucode"; CPU_TYPE="AMD" ;;
                *) echo "⚠ Invalid choice. No changes made." ;;
            esac
            ;;
        9)  # GPU Type
            echo -e "\n=== GPU Selection ==="
            echo "  1) NVIDIA"
            echo "  2) AMD/Intel (Open Source)"
            echo "  3) None/VM"
            read -p "Enter your choice (1-3): " gpu_choice
            case $gpu_choice in
                1)
                    GPU_TYPE="NVIDIA"
                    echo "  Do you want to use NVIDIA open drivers?"
                    echo "  (No will install proprietary drivers)"
                    read -p "Use NVIDIA open drivers? [y/N]: " nvidia_open_choice
                    case $nvidia_open_choice in
                        [Yy]*) NVIDIA_DRIVER_TYPE="Open" ;;
                        *) NVIDIA_DRIVER_TYPE="Proprietary" ;;
                    esac
                    ;;
                2) GPU_TYPE="AMD/Intel"; NVIDIA_DRIVER_TYPE="none" ;;
                3) GPU_TYPE="None/VM"; NVIDIA_DRIVER_TYPE="none" ;;
                *) echo "⚠ Invalid choice. No changes made." ;;
            esac
            ;;
        10) # NVIDIA Driver Type (only if GPU_TYPE is NVIDIA)
            if [ "$GPU_TYPE" = "NVIDIA" ]; then
                echo -e "\n=== NVIDIA Driver Selection ==="
                echo "  Do you want to use NVIDIA open drivers?"
                echo "  (No will install proprietary drivers)"
                read -p "Use NVIDIA open drivers? [y/N]: " nvidia_open_choice
                case $nvidia_open_choice in
                    [Yy]*) NVIDIA_DRIVER_TYPE="Open" ;;
                    *) NVIDIA_DRIVER_TYPE="Proprietary" ;;
                esac
            else
                echo -e "⚠ This option is only available for NVIDIA GPUs. Your current GPU type is: $GPU_TYPE"
            fi
            ;;
        11) # Audio Server
            echo -e "\n=== Audio Server Selection ==="
            echo "  1) PipeWire (Modern, low-latency, recommended)"
            echo "  2) PulseAudio (Traditional, widely compatible)"
            read -p "Enter your choice (1-2): " audio_choice
            case $audio_choice in
                1) AUDIO_SERVER="pipewire" ;;
                2) AUDIO_SERVER="pulseaudio" ;;
                *) echo "⚠ Invalid choice. No changes made." ;;
            esac
            ;;
        12) # Installation Mode
            echo -e "\n=== Installation Mode Selection ==="
            echo "  1) Simple (fewer questions with sensible defaults)"
            echo "  2) Advanced (more customization options)"
            read -p "Enter your choice (1-2): " mode_choice
            case $mode_choice in
                1) 
                   INSTALL_MODE="simple"
                   # Set default values for advanced options
                   ZRAM_SIZE="min(ram, 32768)"  # Default ZRAM size (in MB)
                   EFI_PART_SIZE="1G"           # Default EFI partition size
                   ZFS_COMPRESSION="lz4"        # Default ZFS compression algorithm
                   ;;
                2) INSTALL_MODE="advanced" ;;
                *) echo "⚠ Invalid choice. No changes made." ;;
            esac
            ;;
        13) # Boot Type
            echo -e "\n=== Boot Type Selection ==="
            echo "  1) EFI (Modern systems, recommended)"
            echo "  2) BIOS (Legacy systems)"
            read -p "Enter your choice (1-2): " boot_choice
            case $boot_choice in
                1) BOOT_TYPE="efi" ;;
                2) BOOT_TYPE="bios" ;;
                *) echo "⚠ Invalid choice. No changes made." ;;
            esac
            ;;
        14) # Device
            echo -e "\n=== Installation Device Selection ==="
            echo -e "\033[1;93m⚠️  WARNING: THE SELECTED DISK WILL BE COMPLETELY ERASED!\033[0m\n"
            # Display available disks
            available_disks=$(lsblk -dpno NAME,SIZE,MODEL | grep -E "/dev/(sd|nvme|vd)")
            echo -e "$available_disks\n"
            
            # Let user select a disk
            while true; do
                echo -n "Enter the full path of the disk to install to (e.g., /dev/sda): "
                read -r selected_device
                
                # Verify disk exists
                if lsblk "$selected_device" &> /dev/null; then
                    DEVICE="$selected_device"
                    echo "✓ Selected device: $DEVICE"
                    break
                else
                    echo "❌ Invalid device. Please enter a valid device path."
                fi
            done
            ;;
        15) # ZRAM Size (only in advanced mode)
            if [ "$INSTALL_MODE" = "advanced" ]; then
                echo -e "\n=== ZRAM Size Selection ==="
                echo "  1) Auto (min(RAM, 32GB) - recommended)"
                echo "  2) Half of RAM"
                echo "  3) Custom value (specify in MB)"
                read -p "Enter your choice (1-3): " zram_size_choice
                
                case $zram_size_choice in
                    1) ZRAM_SIZE="min(ram, 32768)" ;;
                    2) ZRAM_SIZE="ram / 2" ;;
                    3)
                        while true; do
                            echo -n "Enter ZRAM size in MB (e.g., 8192 for 8GB): "
                            read -r custom_zram_size
                            
                            # Validate input (simple check for numeric value)
                            if [[ "$custom_zram_size" =~ ^[0-9]+$ ]]; then
                                ZRAM_SIZE="$custom_zram_size"
                                break
                            else
                                echo "❌ Invalid size. Please enter a numeric value in MB."
                            fi
                        done
                        ;;
                    *) echo "⚠ Invalid choice. No changes made." ;;
                esac
            else
                echo -e "⚠ This option is only available in advanced installation mode."
            fi
            ;;
        16) # ZRAM Compression (only in advanced mode)
            if [ "$INSTALL_MODE" = "advanced" ]; then
                echo -e "\n=== ZRAM Compression Selection ==="
                echo "  1) zstd (Best balance of speed/compression - recommended)"
                echo "  2) lz4 (Faster, lower compression ratio)"
                echo "  3) lzo-rle (Legacy option)"
                echo "  4) lzo (Older algorithm)"
                read -p "Enter your choice (1-4): " zram_compression_choice
                
                case $zram_compression_choice in
                    1) ZRAM_COMPRESSION="zstd" ;;
                    2) ZRAM_COMPRESSION="lz4" ;;
                    3) ZRAM_COMPRESSION="lzo-rle" ;;
                    4) ZRAM_COMPRESSION="lzo" ;;
                    *) echo "⚠ Invalid choice. No changes made." ;;
                esac
            else
                echo -e "⚠ This option is only available in advanced installation mode."
            fi
            ;;
        17) # Separate Datasets (only in advanced mode)
            if [ "$INSTALL_MODE" = "advanced" ]; then
                echo -e "\n=== ZFS Datasets Configuration ==="
                echo "  1) Yes (Recommended for flexible management)"
                echo "  2) No (Simpler, use only the root dataset)"
                read -p "Create separate ZFS datasets for common directories? (1-2): " separate_datasets_choice
                
                case $separate_datasets_choice in
                    1) SEPARATE_DATASETS="yes" ;;
                    2) SEPARATE_DATASETS="no" ;;
                    *) echo "⚠ Invalid choice. No changes made." ;;
                esac
            else
                echo -e "⚠ This option is only available in advanced installation mode."
            fi
            ;;
        18) # Encryption (only in advanced mode)
            if [ "$INSTALL_MODE" = "advanced" ]; then
                echo -e "\n=== Disk Encryption ==="
                echo -e "\033[1;93m⚠️  NOTE: If yes, you'll need to enter a passphrase at each boot\033[0m\n"
                echo "  1) Yes (More secure, requires passphrase)"
                echo "  2) No (More convenient, less secure)"
                read -p "Do you want disk encryption? (1-2): " encrypt_choice
                
                case $encrypt_choice in
                    1)
                        ENCRYPT_DISK="yes"
                        # Get encryption passphrase
                        get_password "Enter disk encryption passphrase (At least 8 characters)" DISK_PASSWORD
                        ;;
                    2)
                        ENCRYPT_DISK="no"
                        DISK_PASSWORD=""
                        ;;
                    *) echo "⚠ Invalid choice. No changes made." ;;
                esac
            else
                echo -e "⚠ This option is only available in advanced installation mode."
            fi
            ;;
        19) # Encryption Password (only in advanced mode with encryption)
            if [ "$INSTALL_MODE" = "advanced" ] && [ "$ENCRYPT_DISK" = "yes" ]; then
                echo -e "\n=== Change Encryption Password ==="
                get_password "Enter new disk encryption passphrase (At least 8 characters)" DISK_PASSWORD
                echo "✓ Encryption passphrase updated"
            elif [ "$INSTALL_MODE" = "advanced" ]; then
                echo -e "⚠ This option is only available when encryption is enabled."
            else
                echo -e "⚠ This option is only available in advanced installation mode."
            fi
            ;;
        20) # ZFS Compression (only in advanced mode)
            if [ "$INSTALL_MODE" = "advanced" ]; then
                echo -e "\n=== ZFS Compression Selection ==="
                echo "  1) lz4 (Fast, good ratio, default)"
                echo "  2) zstd (Better compression, slightly slower)"
                echo "  3) gzip (Best compression, slowest)"
                echo "  4) None (No compression)"
                read -p "Enter your choice (1-4): " compression_choice
                
                case $compression_choice in
                    1) ZFS_COMPRESSION="lz4" ;;
                    2) ZFS_COMPRESSION="zstd" ;;
                    3) ZFS_COMPRESSION="gzip" ;;
                    4) ZFS_COMPRESSION="off" ;;
                    *) echo "⚠ Invalid choice. No changes made." ;;
                esac
            else
                echo -e "⚠ This option is only available in advanced installation mode."
            fi
            ;;
        21) # Root Partition Size (only in advanced mode)
            if [ "$INSTALL_MODE" = "advanced" ]; then
                echo -e "\n=== Root Partition Size Selection ==="
                echo "  1) Use all available space (recommended)"
                echo "  2) Specify custom size (for multi-boot or future partitioning)"
                read -p "Enter your choice (1-2): " root_size_choice
                
                case $root_size_choice in
                    1)
                        ROOT_PART_SIZE="MAX"
                        ;;
                    2)
                        # Get the total disk size
                        DISK_SIZE=$(lsblk -bdn -o SIZE "$DEVICE" | awk '{print $1}')
                        DISK_SIZE_GB=$(lsblk -dno SIZE "$DEVICE" | sed 's/ //g')
                        
                        while true; do
                            echo -n "Enter installation partition size in GB (e.g., 50 for 50GB): "
                            read -r custom_root_size
                            
                            # Validate input (simple check for numeric value)
                            if [[ "$custom_root_size" =~ ^[0-9]+$ ]]; then
                                # Check if specified size is reasonable (at least 20GB, less than 95% of disk)
                                if (( custom_root_size >= 20 && custom_root_size <= DISK_SIZE_GB * 95 / 100 )); then
                                    ROOT_PART_SIZE="${custom_root_size}G"
                                    break
                                else
                                    echo "❌ Invalid size. Please enter a value between 20 and $((DISK_SIZE_GB * 95 / 100)) GB."
                                fi
                            else
                                echo "❌ Invalid size format. Please enter a numeric value in GB."
                            fi
                        done
                        ;;
                    *) echo "⚠ Invalid choice. No changes made." ;;
                esac
            else
                echo -e "⚠ This option is only available in advanced installation mode."
            fi
            ;;
        22) # EFI Partition Size (only in advanced mode)
            if [ "$INSTALL_MODE" = "advanced" ]; then
                echo -e "\n=== EFI Partition Size Selection ==="
                echo "Current EFI partition size: $EFI_PART_SIZE"
                echo "Standard size is 1G, which is sufficient for most systems."
                read -p "Do you want to change the EFI partition size? [y/N]: " change_efi_size
                
                case $change_efi_size in
                    [Yy]*)
                        while true; do
                            echo -n "Enter EFI partition size (e.g., 512M, 1G): "
                            read -r new_efi_size
                            
                            # Validate input format (simple regex check)
                            if [[ "$new_efi_size" =~ ^[0-9]+[MG]$ ]]; then
                                EFI_PART_SIZE="$new_efi_size"
                                echo "✓ EFI partition size set to: $EFI_PART_SIZE"
                                break
                            else
                                echo "❌ Invalid size format. Please use format like '512M' or '1G'."
                            fi
                        done
                        ;;
                    *)
                        echo "✓ EFI partition size unchanged: $EFI_PART_SIZE"
                        ;;
                esac
            else
                echo -e "⚠ This option is only available in advanced installation mode."
            fi
            ;;
        c|C)
            echo "✓ Proceeding with installation..."
            break
            ;;
        a|A)
            echo "⚠ Installation aborted."
            exit 1
            ;;
        *)
            echo -en "Invalid option. Please enter a valid number, 'c' to confirm, 'a' to abort: "
            ;;
    esac
    
    # Update the summary after each change
    display_summary
done
